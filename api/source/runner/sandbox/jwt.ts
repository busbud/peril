import * as jwt from "jsonwebtoken"

import { isString } from "util"
import { PRIVATE_GITHUB_SIGNING_KEY, PUBLIC_GITHUB_SIGNING_KEY } from "../../globals"

type JWT = string

type PerilSandboxAuthJWT = JWT

// The Decoded JWT data
export interface PerilSandboxAuth {
  exp?: number
  iat: number
  iss: string[]
  data: {
    actions: string[]
  }
}

/**
 * A JWT which lasts 2 minutes which can be used to make authenticated
 * requests to Peril for a specific installation.
 */
export const createPerilSandboxAPIJWT = (installationID: number, actions: string[]): PerilSandboxAuthJWT => {
  const now = Math.round(new Date().getTime() / 1000)
  const keyContent = PRIVATE_GITHUB_SIGNING_KEY
  const payload: PerilSandboxAuth = {
    iat: now,
    iss: [String(installationID)],
    data: {
      actions,
    },
  }

  return jwt.sign(payload, keyContent, { algorithm: "RS256", expiresIn: "2 min" })
}

/**
 * Decode and verifies a JWT generated by createPerilSandboxAPIJWT above
 * @param token the JWT
 */
export const getDetailsFromPerilSandboxAPIJWT = (token: PerilSandboxAuthJWT) =>
  new Promise<PerilSandboxAuth>((res, rej) => {
    const options = { algorithms: ["RS256"] }
    jwt.verify(token, PUBLIC_GITHUB_SIGNING_KEY, options, (err, decoded) => {
      if (err) {
        rej(err)
      } else {
        if (isString(decoded)) {
          res(JSON.parse(decoded as string))
        } else {
          res(decoded as any)
        }
      }
    })
  })
